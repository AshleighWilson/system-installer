---
- hosts: all
  tasks:
    - name: Arch install media check
      fail:
        msg: "The host is not booted from the arch install media."
      when: ansible_nodename != "archiso"
      tags:
        - media_check

    - name: Set console keyboard layout
      command: loadkeys uk
      tags:
        - keyboard_layout

    - name: Verify UEFI boot mode
      stat:
        path: /sys/firmware/efi/efivars/
      register: file_info
      failed_when: not file_info.stat.exists
      tags:
        - boot_mode

    # - name: Connect to internet
    
    - name: Update system clock
      command: timedatectl set-ntp true
      tags:
        - update_clock

    - name: Partition disks
      block:

        - name: Create boot partition
          parted:
            device: '{{ install_drive }}'
            label: gpt
            number: 1
            part_end: 512MB
            name: boot
            flags: [boot, esp]
            state: present

        - name: Create root partition
          parted:
            device: '{{ install_drive }}'
            label: gpt
            number: 2
            part_start: 512MB
            name: root
            flags: []
            state: present
      tags:
        - paritition_disks

    - name: Format partitions
      block:
        # TODO: Iterate over all mountpoints under /mnt?
        - name: Ensure btrfs subvolumes are unmounted
          mount:
            path: /mnt/{{ item.path }}
            src: "{{ root_part }}"
            fstype: btrfs
            opts: "compress=zstd,discard=async,subvol={{ item.subvolume }}"
            state: unmounted
          loop: "{{ btrfs.subvolumes }}"

        - name: Ensure /mnt/boot is unmounted
          mount:
            path: /mnt/boot
            state: unmounted

        - name: Ensure /mnt is unmounted
          mount:
            path: /mnt
            state: unmounted

        - name: Format /boot as FAT32
          filesystem:
            dev: '{{ boot_part }}'
            fstype: vfat
            opts: -F32
            force: yes

        - name: Format / as btrfs
          filesystem:
            dev: '{{ root_part }}'
            fstype: btrfs
            force: yes
      tags:
        - format_partitions

    - name: Create btrfs subvolumes
      block:

        - name: Mount root btrfs partition as /mnt
          mount:
            path: /mnt
            src: '{{ root_part }}'
            fstype: btrfs
            state: mounted

        - name: Create root btrfs subvolume
          command: btrfs subvolume create /mnt/@

        - name: Create btrfs subvolumes
          command: btrfs subvolume create /mnt/{{ item.subvolume }}
          loop: "{{ btrfs.subvolumes }}"

        - name: Unmount /mnt
          mount:
            path: /mnt
            state: unmounted

    - name: Mount filesystems
      block:
        - name: Mount root btrfs subvolume
          mount:
            path: /mnt
            src: "{{ root_part }}"
            fstype: btrfs
            opts: "compress=zstd,discard=async,subvol=@"
            state: mounted

        - name: Mount btrfs subvolumes
          mount:
            path: /mnt/{{ item.path }}
            src: "{{ root_part }}"
            fstype: btrfs
            opts: "compress=zstd,discard=async,subvol={{ item.subvolume }}"
            state: mounted
          loop: "{{ btrfs.subvolumes }}"

        - name: Create boot mountpoint
          file:
            path: /mnt/boot
            state: directory

        - name: Mount boot filesystem
          mount:
            path: /mnt/boot
            src: "{{ boot_part }}"
            fstype: vfat
            state: mounted
      tags:
        - mount_filesystems

    - name: Install base system
      block:

        - name: Select fastest mirrors
          command: reflector --save /etc/pacman.d/mirrorlist --country "United Kingdom" --protocol https --sort rate
          tags:
            select_mirrors

        - name: Install base packages, kernel and firmware
          command: pacstrap /mnt base {{ kernels}} linux-firmware {{ core_packages | join(' ') }}

        - name: Install Intel microcode
          command: arch-chroot /mnt pacman -S intel-ucode --noconfirm
          when: ansible_processor[1].find('Intel') != -1

        - name: Install AMD microcode
          command: arch-chroot /mnt pacman -S amd-ucode --noconfirm
          when: ansible_processor[1].find('AMD') != -1

    - name: Configure base system
      block:

        - name: Generate fstab
          shell: genfstab -U /mnt > /mnt/etc/fstab

        - name: Set timezone
          command: arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/London /etc/localtime

        - name: Generate /etc/adjtime
          command: arch-chroot /mnt hwclock --systohc

        - name: Configure locale.gen
          lineinfile:
            dest: /mnt/etc/locale.gen
            regexp: '{{ item.regex }}'
            line: '{{ item.line }}'
          loop:
            - {regex: en_GB\.UTF-8 UTF-8, line: en_GB.UTF-8 UTF-8}

        - name: Generate locales
          command: arch-chroot /mnt locale-gen

        - name: Create locale.conf
          copy:
            content: "LANG=en_GB.UTF-8"
            dest: /mnt/etc/locale.conf

        - name: Set console keyboard layout
          copy:
            content: "KEYMAP=uk"
            dest: /mnt/etc/vconsole.conf

        - name: Create the hostname file
          copy:
            content: "{{ hostname }}"
            dest: /mnt/etc/hostname

    - name: Enable services
      block:
      
        - name: Enable NetworkManager on boot
          command: arch-chroot /mnt systemctl enable NetworkManager

        - name: Enable SSHD on boot
          command: arch-chroot /mnt systemctl enable sshd
    
    - name: Install boot loader
      block:

        - name: Install grub
          command: arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB-ARCH

        - name: Create grub configuration
          command: arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

    - name: Configure user
      block:

        - name: Delete bash configurations from /etc/skel
          command: arch-chroot /mnt rm -rf /etc/skel/*(D)

        - name: Setup user accounts
          command: arch-chroot /mnt useradd -s /bin/zsh -m --user-group -G wheel {{ user.name }}

        - name: Create user password
          command: arch-chroot /mnt sh -c 'echo {{ user.name}}:{{ user.password }} | chpasswd'

        - name: Create user's ssh directory
          file:
            path: /mnt/home/{{ user.name }}/.ssh
            state: directory
            mode: 0700

        - name: Copy ssh keys
          copy:
            src: ~/.ssh/authorized_keys
            dest: /mnt/home/{{ user.name }}/.ssh/
            mode: 0600

        - name: Set mode, owner and group for ssh keys
          command: arch-chroot /mnt chown -R {{ user.name }}:{{ user.name }} /home/{{ user.name }}/.ssh/

        - name: Give passwordless sudo access to wheel group
          copy:
            content: '%wheel ALL=(ALL) NOPASSWD: ALL'
            dest: /mnt/etc/sudoers.d/wheel
            validate: /usr/sbin/visudo --check --file=%s
    
    # - name: Set up initramfs
    # - name: Set root password
    # - name: Setup netctl
    # - name: Give passwordless sudo access to wheel group
    # - name: Install AUR helper
    # - name: Unmount partitions

- hosts: all
  tasks:
    - name: Reboot
      reboot:
        connect_timeout: 1
        reboot_timeout: 1
      failed_when: false
      when: false # change to false to disable this task
      tags:
        - reboot
